version: "3.8"

services:
  traefik:
    image: traefik:2.0.2
    command:
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--log.level=INFO"
      # - "--log.level=DEBUG"
      # - "--providers.docker=true"
      # - "--providers.docker.watch=true"
      - "--providers.docker.swarmmode=true"
      # - "--providers.docker.network=proxy"
      # - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # - "--providers.docker.swarmModeRefreshSeconds=15s"
      - "--api"
      # - "--providers.docker.exposedbydefault=false"
      # - "--providers.docker.domain=www.swarm.makarewicz.eu"
      - --certificatesresolvers.le.acme.httpChallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=marcin@makarewicz.eu
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      # - --certificatesresolvers.le.acme.httpchallenge=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        # - "traefik.enable=true" # Enable Traefik, because we disabled expose a service by default
        - "traefik.http.routers.t.rule=Host(`traefik.swarm.makarewicz.eu`)" # Tell Traefik to create routre 't' and catch all requests with given Host (http header: Host)
        - "traefik.http.routers.t.service=api@internal" # the router 't' will forward request to service api@internal
        - "traefik.http.routers.t.tls.certresolver=le"
        - "traefik.http.services.t.loadbalancer.passhostheader=true"
        - "traefik.http.services.t.loadbalancer.server.port=8080" # the router 't' will balance incoming requests between servers listens on port 8080
        # https://stackoverflow.com/a/58477067
        # middleware redirect
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # global redirect to https
        - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.redirs.entrypoints=web"
        - "traefik.http.routers.redirs.middlewares=redirect-to-https"
  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami
    #    ports:
    #      - 8080:80
    deploy:
      mode: global
      labels:
        # - "traefik.enable=true"
        # - "traefik.http.routers.who.rule=Host(`54.38.138.125`,`54.38.137.98`,`worker1.makarewicz.eu`)"
        - "traefik.http.routers.who.rule=Host(`worker1.makarewicz.eu`,`whoami.swarm.makarewicz.eu`)"
        - "traefik.http.routers.who.tls.certresolver=le"
        - "traefik.http.services.who.loadbalancer.passhostheader=true"
        - "traefik.http.services.who.loadbalancer.server.port=80"

  app:
    image: zimekk/app:$VERSION
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 2
      labels:
        # - "traefik.enable=true"
        - "traefik.http.routers.www.rule=Host(`swarm.makarewicz.eu`,`www.swarm.makarewicz.eu`)"
        - "traefik.http.routers.www.tls.certresolver=le"
        - "traefik.http.services.www.loadbalancer.passhostheader=true"
        - "traefik.http.services.www.loadbalancer.server.port=8080"
        - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"

  visualizer:
    image: dockersamples/visualizer:latest
    # ports:
    #  - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        # - "traefik.enable=true"
        - "traefik.http.routers.viz.rule=Host(`visualizer.swarm.makarewicz.eu`)"
        - "traefik.http.routers.viz.tls.certresolver=le"
        - "traefik.http.services.viz.loadbalancer.passhostheader=true"
        - "traefik.http.services.viz.loadbalancer.server.port=8080"
        - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"

  # https://github.com/elastic/examples
  # https://itnext.io/distributed-tracing-in-your-kibana-with-nodejs-610c9f07b4b4
  # https://github.com/elastic/apm-agent-nodejs
  # https://www.elastic.co/blog/distributed-tracing-opentracing-and-elastic-apm
  # https://medium.com/swlh/microservices-observability-with-distributed-tracing-32ae467bb72a
  # https://github.com/opentracing/opentracing-javascript
  # https://github.com/jaegertracing/jaeger-client-node
  # https://github.com/yidinghan/eak/blob/master/docker-compose.yml
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.1
    environment:
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    # ports:
    #   - 9200:9200
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9200"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    deploy:
      placement:
        constraints: [node.labels.elastic == true]
      labels:
        - "traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.swarm.makarewicz.eu`)"
        - "traefik.http.routers.elasticsearch.tls.certresolver=le"
        - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.1
    environment:
      - "SERVER_HOST=0.0.0.0"
    # ports:
    #   - 5601:5601
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:5601"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    depends_on:
      - elasticsearch
    deploy:
      placement:
        constraints: [node.labels.elastic == true]
      labels:
        - "traefik.http.routers.kibana.rule=Host(`kibana.swarm.makarewicz.eu`)"
        - "traefik.http.routers.kibana.tls.certresolver=le"
        - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.7.1
    ports:
      - 8200:8200
    environment:
      - output.elasticsearch.hosts=['http://elasticsearch:9200']
      - apm-server.host="0.0.0.0:8200"
      # - apm-server.secret_token="xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44"
      - setup.kibana.host="kibana:5601"
      - setup.template.enabled=true
      - logging.to_files=false
    depends_on:
      - elasticsearch
      - kibana
    deploy:
      placement:
        constraints: [node.labels.elastic == true]

volumes:
  letsencrypt:
